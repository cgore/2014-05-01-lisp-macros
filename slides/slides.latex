% Copyright (c) 2014, Christopher Mark Gore,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{amsmath}
\usepackage[normalem]{ulem}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{bookman}
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
\usepackage{textcomp}
\usepackage[normalem]{ulem}

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.8}
\definecolor{identifiercolor}{rgb}{0.2,0.2,0.2}
\definecolor{keywordcolor}{rgb}{0.1,0.3,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\small\ttfamily,
  language=Lisp,
  morekeywords={make-instance},
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor},
  upquote=true
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\title{\psshadowbox{Macros in Common Lisp}}
\author{Christopher Mark Gore\\
  \texttt{http://www.cgore.com}\\
  \texttt{cgore@cgore.com}\\
  \raisebox{-2pt}{\includegraphics[height=10pt]{twitter-logo.eps}}
  \texttt{@cgore}}
\date{Thursday, May 1, \textsc{ad} 2014}

\begin{document}

\raggedslides[0mm]

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \color{\hc}

  \begin{center}
    \includegraphics[height=1.25in]{lambda-sticker-blue.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Getting Started with Common Lisp}

  \begin{enumerate}
    \item Install Linux.\\
      \texttt{http://aptosid.com}
    \item Install SBCL and some libraries.\\
      \texttt{apt-get install sbcl\{,-doc,-source\} \textbackslash \\
        cl-\{asdf,cffi\}}
    \item Install Emacs and SLIME \textit{(Not strictly required.)}\\
      \texttt{apt-get install emacs\{,-goodies-el\} cl-swank \textbackslash \\
        cl-swank slime common-lisp-controller}
  \end{enumerate}

  \hrule

  Since my new employer bought me a shiny new MacBook Pro:\\
  \texttt{brew install sbcl}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Lisp Macros Are Vastly Superior To:}

  \begin{enumerate}
    \item Not having macros at all.
    \item Vim/Emacs\footnote{Excluding \texttt{defmacro} in Elisp, which is equivalent.} macros.
    \item Microsoft Word/Excel macros.
    \item C pre-processor macros.
    \item Scheme ``hygenic'' macros.
  \end{enumerate}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Defun versus Defmacro}

  We can define functions with \texttt{defun}, and we can define macros with
  \texttt{defmacro}.  These two definitions achieve the same goal in quite
  different ways.

\begin{lstlisting}
(defun add-one (x)
  (+ 1 x))
(defmacro add-one (x)
  `(+ 1 ,x))
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Why Not Just Functions?}

  You shouls prefer functions instead of macros if they can do the job.
  There are lots of operations that can only be done with macros:
  functions can't make it happen.

  \begin{itemize}
    \item Linguistic extensions
    \item Preventing the execution of the arguments
    \item Controlling the execution of the arguments
    \item Rewriting the arguments before they are executed
    \item Natural DSLs
  \end{itemize}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Backquote}

  Backquotes let you quote out a list, but selectively evaluate some of the list
  elements. This shorthand notation makes it really easy to build up complicated
  s-expressions on the fly.

\begin{lstlisting}
(let ((a 12)
      (b 'x)
      (c '(q r s)))
  `( a  b   c)         ; Becomes '(a  b c)
  `(,a  b   c)         ; Becomes '(12 b c)
  `( a ,b   c)         ; Becomes '(a  x c)
  `( a  b  ,c)         ; Becomes '(a  b (q r s))
  `( a  b ,@c)         ; Becomes '(a  b  q r s)
  `( a  b ,(+ 1 2 3))  ; Becomes '(a  b 6)
\end{lstlisting}

\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Nested Backquotes}

  Backquotes are a bit confusing when they are nested inside each other.  It is
  generally best to avoid it as much as possible, but sometimes it is necessary.
  The general rule is they apply inside-to-outside.

\begin{lstlisting}
(let ((a 'x))
  (eval `(let ((a 'y)
               (b ',a))
           `(,a ,b)))) ; Returns '(y x)
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{How Macros Work}

  Macros have two main features:
  \begin{enumerate}
    \item Controlling, preventing, or manipulating the evaluation of their
      arguments.
    \item Local expansion within the calling context.
  \end{enumerate}

  If you really want a macro, it is because you need one of those abilities.
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Controlling Argument Evaluation}

\begin{lstlisting}
(defmacro upside-down (first last)
  `(progn ,last
          ,first))
(upside-down
  (format t "The first shall be last~%")
  (format t "The last shall be first~%"))
\end{lstlisting}

This prints:\\
\texttt{The last shall be first\\
The first shall be last}

\begin{lstlisting}
(let ((x 42))
  (upside-down (setf x (/ x 2))
               (setf x (+ x 2)))) ; 22, not 23.
\end{lstlisting}

\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{A Weird If \textellipsis}

  The Normal \texttt{if} in Common Lisp has the following basic form:

\begin{lstlisting}
(if (some-conditional)
  (true-form)
  (optional-false-form))
\end{lstlisting}

  For example:

\begin{lstlisting}
(defun is-it-positive? (x)
  (if (< 0 x)
    (format t "It's positive!~%")
    (format t "It's not positive!~%"))
\end{lstlisting}

  But what if we want a weird version of \texttt{if}?
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\textellipsis A Weird If \textellipsis}

  What if we think this is the\\
  \textsc{One True Way to Write IF Statements}?

\begin{lstlisting}
(weird-if (true-form)
          (some-conditional)
          (optional-false-form))
\end{lstlisting}

  An infix-operator variant of if?  Or something like that.  For example:

\begin{lstlisting}
(defun is-it-positive? (x)
  (weird-if (format t "It's positive!~%")
            (< 0 x)
            (format t "It's not positive!~%"))
\end{lstlisting}

\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\textellipsis A Weird If}

  We can make it happen with a very simple macro.

\begin{lstlisting}
(defmacro weird-if (true-form
                    conditional
                    &optional (false-form nil))
  `(if ,conditional ,true-form ,false-form))
\end{lstlisting}

  Now we can use or \texttt{weird-if} everywhere!

\begin{lstlisting}
(weird-if "true" (< 12 22) "false") ; Returns "true"
(weird-if "true" (< 44 22) "false") ; Returns "false"
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Wordy If \textellipsis}

  How about a \texttt{wordy-if}?  Some people might actually think this one is a
  good idea, unlike the last one.

\begin{lstlisting}
(defmacro wordy-if (conditional then &body body)
  (let* ((else-position (position 'else body))
         (true-body (subseq body 0 else-position))
         (false-body (when else-position
                       (subseq body
                               (1+ else-position)))))
    `(if ,conditional
       (progn ,@true-body)
       (progn ,@false-body))))
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\textellipsis Wordy If}

  What does that give us?  Now we can write our conditionals as such:

\begin{lstlisting}
(wordy-if (< 12 22)
  then
    (format t "This is obviously true.~%")
    (format t "But a good demonstration anyway.~%")
    "it is true" ; returns this string
  else
    (format t "This won't happen.~%")
    (format t "Neither will this.~%")
    "and this won't be returned")
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Even Stranger and Wordier If's}

  We can make this \texttt{wordy-if} a lot more complex.

  \begin{enumerate}
  \item We could add \texttt{else-if} support.
  \item We could add \texttt{otherwise}, to support a default case.
  \item We could add \texttt{break}, to break out of the if block.
  \item Or anything else you can think of.
  \end{enumerate}

  Common Lisp macros give us the ability to write not just easy-to-use
  domain-specific languages (DSL's, their most typical real-world use), they
  give us the ability to easily write \textbf{whole new programming languages
    inside of Common Lisp itself, with no real challenge of writing a compiler
    or any other nonsense like Lex and Yacc.}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Local Expansion}

  Macros work in the local calling namespace, and can therefore capture
  variables from that namespace or pollute variables into that namespace.

  \begin{itemize}
  \item If that is what you want, then it is awesome.
  \item If that isn't what you want, then it can be a big headache and endless
    source of bugs, if you don't work with it correctly and pay attention to
    what you are doing.
  \end{itemize}

  The whole reason for ``hygenic macros'' and the like are because lots of
  people don't know how to correctly reason about variable pollution and
  capture.
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Bad Variable Capture}

  Let's write a \texttt{swap} macro!

\begin{lstlisting}
(defmacro bad-swap (x y)
  `(let ((temp))
     (setf temp ,x)
     (setf ,x ,y)
     (setf ,y temp)))
\end{lstlisting}

  We are intentionally altering the \texttt{x} and \texttt{y} passed in, that's
  good. But what about temp? What if there already is a temp variable in the
  local scope? What if they try to do \texttt{(swap temp something)}? What if
  they try to do nested calls to \texttt{swap}? These are all broken.

\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Gensym}

  How do we avoid capturing a variable?
  By \textit{generating brand new symbols.}%
  \footnote{In real life, just use \texttt{(psetf x y y x)}.}
  Each call to \texttt{gensym} makes a brand new uninterned symbol.

\begin{lstlisting}
(defmacro swap (x y)
  (let ((temp (gensym)))
    `(progn (setf ,temp ,x)
            (setf ,x ,y)
            (setf ,y ,temp))))
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{\sout{Polluting} Gifting the Namespace}

  We can add to the namespace intentionally.  It's not pollution, it's a free
  gift!  Just like all of those cigarette butts!

\begin{lstlisting}
(defmacro aif (conditional t-action &optional nil-action)
  `(let ((it ,conditional))
     (if it ,t-action ,nil-action)))
(defmacro awhen (test-form &body body)
  `(aif ,test-form (progn ,@body)))
\end{lstlisting}

Now we could change (from our \texttt{wordy-if} macro):

\begin{lstlisting}
(when else-position (subseq body (1+ else-position)))
\end{lstlisting}

Into:

\begin{lstlisting}
(awhen else-position (subseq body (1+ it)))
\end{lstlisting}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{WITH-* Macros}

  A very common use of ``pollution'' is special-purpose \texttt{with-}* macros.
  The best example of what these do is the canonical \texttt{with-open-file}.

\begin{lstlisting}
(with-open-file (input "/some/file/path.txt")
(do ((line (read-line input) (read-line input nil 'eof)))
    ((eq line 'eof) "Reached end of file.")
  (format t "Read a line: ~A~%" line))
\end{lstlisting}

  You can define your own \texttt{with-db}, \texttt{with-kb},
  \texttt{with-csv-file}, \texttt{with-json-file}, or whatever makes sense in
  your specific example.

  \begin{itemize}
  \item The macro does setup.
  \item The macro provides one or more resources to use.
  \item The macro does cleanup.
  \end{itemize}
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Destructuring Parameter Lists}

  \TODO
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \h{Macro-Related Things}

  These are all really cool topics, but each would really need a lot more time
  on their own to do them justice.

  \begin{itemize}
  \item Symbol macros.
  \item Reader macros.
  \item M-expressions.
  \item F-expressions.
  \end{itemize}

  Perhaps another day.
\end{slide}

\begin{slide} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{Questions?}}}}
  \end{center}
\end{slide}

\end{document}
